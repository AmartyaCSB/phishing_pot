name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio httpx
    
    - name: Lint with flake8
      run: |
        pip install flake8
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Test with pytest
      env:
        HF_API_KEY: ${{ secrets.HF_API_KEY }}
      run: |
        # Create basic tests if they don't exist
        mkdir -p tests
        echo "import pytest" > tests/__init__.py
        echo "def test_import(): import app, classifier_service, email_classifier" > tests/test_basic.py
        pytest tests/ -v
    
    - name: Test API endpoints
      env:
        HF_API_KEY: ${{ secrets.HF_API_KEY }}
      run: |
        # Start server in background and test basic endpoints
        python -c "
        import subprocess
        import time
        import requests
        import sys
        
        # Start server
        proc = subprocess.Popen(['python', 'start_server.py'], 
                              stdout=subprocess.PIPE, 
                              stderr=subprocess.PIPE)
        
        # Wait for server to start
        time.sleep(30)
        
        try:
            # Test health endpoint
            response = requests.get('http://localhost:8000/health', timeout=10)
            print(f'Health check status: {response.status_code}')
            
            # Test models endpoint
            response = requests.get('http://localhost:8000/models', timeout=10)
            print(f'Models endpoint status: {response.status_code}')
            
        except Exception as e:
            print(f'Test failed: {e}')
            sys.exit(1)
        finally:
            proc.terminate()
        "

  docker:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      run: |
        docker build -t email-classifier:latest .
    
    - name: Test Docker image
      run: |
        # Test that the image builds and runs
        docker run --rm -d --name test-container -p 8001:8000 email-classifier:latest
        sleep 30
        curl -f http://localhost:8001/health || exit 1
        docker stop test-container

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Run security scan
      uses: securecodewarrior/github-action-add-sarif@v1
      with:
        sarif-file: 'security-scan-results.sarif'
      continue-on-error: true
    
    - name: Check for secrets
      run: |
        # Basic check for accidentally committed secrets
        if grep -r "sk-" . --exclude-dir=.git --exclude="*.yml" --exclude="*.yaml"; then
          echo "Potential API key found!"
          exit 1
        fi
